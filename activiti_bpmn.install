<?php
function activiti_bpmn_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $node_activiti = array(
    'type' => 'node_activiti',
    'name' => $t('Activiti Node'),
    'base' => 'node_content',
    'description' => $t('This is an Activiti BPMN node with a few fields.'),
    'body_label' => $t('Description of your new version of you BPMN file')
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($node_activiti);
  node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);

// Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_activiti_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_activiti_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_activiti['type'];
    field_create_instance($instance);
  }

}

function activiti_bpmn_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'node_activiti'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  foreach (array_keys(_activiti_installed_fields()) as $field) {
    field_delete_field($field);
  }
  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('node_activiti');
}



/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * activiti_bpmn_install() and activiti_bpmn_uninstall().
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 *
 */
function _activiti_installed_fields() {
  $t = get_t();
  return array(
    'activiti_diagramfile' => array(
      'field_name' => 'activiti_diagramfile',
      'type'       => 'file',
      'cardinality' => 1,
      'settings' => array(
        'uri_scheme' => 'private',
      ),
    ),
    
  );
}


/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "birt_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * birt_install() and birt_uninstall().
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 *
 * @ingroup birt
 */
function _activiti_installed_instances() {
  $t = get_t();
  return array(
    'activiti_diagramfile' => array(
      'field_name' => 'activiti_diagramfile',
      'type' => 'file',
      'label' => 'Activiti BPMN XML File',
      'settings' => array(
        'description_field' => 0,
        'file_extensions' => 'bpmn',
        'max_filesize' => '50MB',
        'user_register_form' => FALSE,
      ),
    ),
  );
}

